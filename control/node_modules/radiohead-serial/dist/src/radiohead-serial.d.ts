/// <reference types="node" />
/// <reference types="bluebird" />
import { EventEmitter } from 'events';
import * as Promise from 'bluebird';
import { RH_Serial, RH_SERIAL_MAX_PAYLOAD_LEN, RH_SERIAL_HEADER_LEN, RH_SERIAL_MAX_MESSAGE_LEN } from './RH_Serial';
import { RHDatagram } from './RHDatagram';
import { RHReliableDatagram, RH_FLAGS_ACK, RH_DEFAULT_TIMEOUT, RH_DEFAULT_RETRIES } from './RHReliableDatagram';
export declare const version = "3.0.1";
export { RH_Serial, RHDatagram, RHReliableDatagram, RH_SERIAL_MAX_PAYLOAD_LEN, RH_SERIAL_HEADER_LEN, RH_SERIAL_MAX_MESSAGE_LEN, RH_FLAGS_ACK, RH_DEFAULT_TIMEOUT, RH_DEFAULT_RETRIES };
/** This is the address that indicates a broadcast */
export declare const RH_BROADCAST_ADDRESS = 255;
export declare const RH_FLAGS_RESERVED = 240;
export declare const RH_FLAGS_APPLICATION_SPECIFIC = 15;
export declare const RH_FLAGS_NONE = 0;
/**
 * Interface for a received message.
 */
export interface RH_ReceivedMessage {
    /**
     * Buffer containing the received data.
     * @type {Buffer}
     */
    data: Buffer;
    /**
     * Length of the received data.
     * @type {number}
     */
    length: number;
    /**
     * TO header.
     * @type {number}
     */
    headerTo: number;
    /**
     * FROM header.
     * @type {number}
     */
    headerFrom: number;
    /**
     * ID header.
     * @type {number}
     */
    headerId: number;
    /**
     * FLAGS header.
     * @type {number}
     */
    headerFlags: number;
}
/**
 * The RadioHeasSerial main class for sending and receiving messages through the RadioHead network.
 */
export declare class RadioHeadSerial extends EventEmitter {
    /**
     * Private flag if RHReliableDatagram (true) or RHDatagram (false) is used.
     */
    private _reliable;
    /**
     * The used driver.
     */
    private _driver;
    /**
     * The used manager.
     * An instance of either RHReliableDatagram or RHDatagram.
     */
    private _manager;
    /**
     * Constructor for a new instance of this class.
     * @param {string}  port     The serial port/device to be used for the communication. (e.g. /dev/ttyUSB0)
     * @param {number}  baud     The baud rate to be used for the communication. (e.g. 9600)
     * @param {number}  address  The address of this node in the RadioHead network. Address range goes from 1 to 254.
     * @param {boolean} reliable (optional) false if RHDatagram should be used instead of RHReliableDatagram. (default true)
     */
    constructor(port: string, baud: number, address: number, reliable?: boolean);
    /**
     * Closes the Serialport.
     * After close() is called, no messages can be received.
     * @return {Promise} Promise which will be resolved if the SerialPort is closed.
     */
    close(): Promise<{}>;
    /**
     * Send a message through the RadioHead network.
     * @param  {number} to       Recipient address. Use 255 for broadcast messages.
     * @param  {Buffer} data     Buffer containing the message to send.
     * @param  {number} length   Optional number ob bytes to send from the buffer. If not given the whole buffer is sent.
     * @return {Promise}         A Promise which will be resolved when the message has been sent, or rejected in case of an error.
     */
    send(to: number, data: Buffer, length?: number): Promise<{}>;
    /**
     * Set the address of this node in the RadioHead network.
     * @param {number} address The new address.
     */
    setAddress(address: number): void;
    /**
     * Returns the address of this node.
     * @return {number} The address of this node.
     */
    thisAddress(): number;
    /**
     * Sets the maximum number of retries.
     * Defaults to 3 at construction time.
     * If set to 0, each message will only ever be sent once.
     * @param {number} count New number of retries.
     */
    setRetries(count: number): void;
    /**
     * Returns the currently configured maximum retries count.
     * Can be changed with setRetries().
     * @return {number} The currently configured maximum retries count.
     */
    getRetries(): number;
    /**
     * Sets the minimum retransmit timeout in milliseconds.
     * If an ack is taking longer than this time, a message will be retransmitted.
     * Default is 200.
     * @param {number} timeout New timeout in milliseconds.
     */
    setTimeout(timeout: number): void;
    /**
     * Returns the number of retransmissions we have had to send since starting
     * or since the last call to resetRetransmissions().
     * @return {number} The number of retransmissions we have had to send since starting.
     */
    getRetransmissions(): number;
    /**
     * Resets the count of the number of retransmissions to 0.
     */
    resetRetransmissions(): void;
    /**
     * Tells the receiver to accept messages with any to address, not just messages addressed to this node or the broadcast address.
     * @param {boolean} promiscuous true if you wish to receive messages with any to address. (default false)
     */
    setPromiscuous(promiscuous: boolean): void;
}
