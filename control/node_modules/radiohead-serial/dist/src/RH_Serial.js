"use strict";
/*
 * Node.js module radiohead-serial
 *
 * RadioHead Library (http://www.airspayce.com/mikem/arduino/RadioHead/)
 * Copyright (c) 2014 Mike McCauley
 *
 * Port from native C/C++ code to TypeScript
 * Copyright (c) 2017 Peter MÃ¼ller <peter@crycode.de> (https://crycode.de/)
 */
/// <reference types="node" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var Promise = require("bluebird");
var SerialPort = require("serialport");
var radiohead_serial_1 = require("./radiohead-serial");
var RHCRC_1 = require("./RHCRC");
/**
 * Defines different receiver states in teh receiver state machine
 */
var RxState;
(function (RxState) {
    RxState[RxState["RxStateInitialising"] = 0] = "RxStateInitialising";
    RxState[RxState["RxStateIdle"] = 1] = "RxStateIdle";
    RxState[RxState["RxStateDLE"] = 2] = "RxStateDLE";
    RxState[RxState["RxStateData"] = 3] = "RxStateData";
    RxState[RxState["RxStateEscape"] = 4] = "RxStateEscape";
    RxState[RxState["RxStateWaitFCS1"] = 5] = "RxStateWaitFCS1";
    RxState[RxState["RxStateWaitFCS2"] = 6] = "RxStateWaitFCS2"; // Waiting for second FCS octet
})(RxState || (RxState = {}));
// Special characters
var STX = 0x02;
var ETX = 0x03;
var DLE = 0x10;
var SYN = 0x16;
/**
 * Maximum message length (including the headers) we are willing to support
 */
exports.RH_SERIAL_MAX_PAYLOAD_LEN = 64;
/**
 * The length of the headers we add.
 * The headers are inside the payload and are therefore protected by the FCS
 */
exports.RH_SERIAL_HEADER_LEN = 4;
/**
 * The maximum message length supported by the RH_Serial driver.
 * This is the largest supported size of a rx or tx buffer.
 */
exports.RH_SERIAL_MAX_MESSAGE_LEN = (exports.RH_SERIAL_MAX_PAYLOAD_LEN - exports.RH_SERIAL_HEADER_LEN);
/**
 * Driver to send and receive unaddressed, unreliable datagrams via a serial connection
 */
var RH_Serial = (function (_super) {
    __extends(RH_Serial, _super);
    /**
     * Constructor
     * @param  {string} port The name of the port we will use. (e.g. /dev/ttyUSB0 or COM1)
     * @param  {number} baud The baud rate we will use.
     */
    function RH_Serial(port, baud) {
        var _this = _super.call(this) || this;
        /**
         * The current state of the Rx state machine
         */
        _this._rxState = RxState.RxStateInitialising;
        /**
         * Progressive FCS calc (CCITT CRC-16 covering all received data (but not stuffed DLEs), plus trailing DLE, ETX)
         */
        _this._rxFcs = 0xffff;
        /**
         * The received FCS at the end of the current message
         */
        _this._rxRecdFcs = 0x0000;
        /**
         * Current length of data in the Rx buffer
         */
        _this._rxBufLen = 0;
        /**
         * The Rx buffer
         */
        _this._rxBuf = new Buffer(exports.RH_SERIAL_MAX_PAYLOAD_LEN); // XXX .fill(0) ?
        // The following vars come from RHGenericDriver
        /**
         * This node id
         */
        _this._thisAddress = radiohead_serial_1.RH_BROADCAST_ADDRESS;
        /**
         * Whether the transport is in promiscuous mode
         */
        _this._promiscuous = false;
        /**
         * TO header to send in all messages
         */
        _this._txHeaderTo = radiohead_serial_1.RH_BROADCAST_ADDRESS;
        /**
         * FROM header to send in all messages
         */
        _this._txHeaderFrom = radiohead_serial_1.RH_BROADCAST_ADDRESS;
        /**
         * ID header to send in all messages
         */
        _this._txHeaderId = 0;
        /**
         * FLAGS header to send in all messages
         */
        _this._txHeaderFlags = 0;
        // construct the SerialPort
        _this._port = new SerialPort(port, {
            autoOpen: false,
            baudRate: baud,
            parser: SerialPort.parsers.byteLength(1) // use special parser to handle each byte separately
        });
        // proxy errors
        _this._port.on('error', function (err) {
            _this.emit('error', err);
        });
        // handle received bytes
        _this._port.on('data', function (buf) {
            _this.handleRx(buf[0]);
        });
        return _this;
    }
    /**
     * Initialise the Driver transport hardware and software.
     * @return {Promise} Promise which will be resolved if the SerialPort is opened.
     */
    RH_Serial.prototype.init = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._port.open(function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    _this._rxState = RxState.RxStateIdle;
                    resolve();
                }
            });
        });
    };
    /**
     * Close the Driver transport hardware and software.
     * @return {Promise} Promise which will be resolved if the SerialPort is closed.
     */
    RH_Serial.prototype.close = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._port.close(function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    };
    /**
     * Handle a character received from the serial port. Implements
     * the receiver state machine.
     * @param {number} ch One received byte.
     */
    RH_Serial.prototype.handleRx = function (ch) {
        switch (this._rxState) {
            case RxState.RxStateIdle:
                if (ch == DLE) {
                    this._rxState = RxState.RxStateDLE;
                }
                break;
            case RxState.RxStateDLE:
                if (ch == STX) {
                    this.clearRxBuf();
                    this._rxState = RxState.RxStateData;
                }
                else {
                    this._rxState = RxState.RxStateIdle;
                }
                break;
            case RxState.RxStateData:
                if (ch == DLE) {
                    this._rxState = RxState.RxStateEscape;
                }
                else {
                    this.appendRxBuf(ch);
                }
                break;
            case RxState.RxStateEscape:
                if (ch == ETX) {
                    // add fcs for DLE, ETX
                    this._rxFcs = RHCRC_1.RHcrc_ccitt_update(this._rxFcs, DLE);
                    this._rxFcs = RHCRC_1.RHcrc_ccitt_update(this._rxFcs, ETX);
                    this._rxState = RxState.RxStateWaitFCS1; // End frame
                }
                else if (ch == DLE) {
                    this.appendRxBuf(ch);
                    this._rxState = RxState.RxStateData;
                }
                else {
                    this._rxState = RxState.RxStateIdle; // Unexpected
                }
                break;
            case RxState.RxStateWaitFCS1:
                this._rxRecdFcs = ch << 8;
                this._rxState = RxState.RxStateWaitFCS2;
                break;
            case RxState.RxStateWaitFCS2:
                this._rxRecdFcs |= ch;
                this._rxState = RxState.RxStateIdle;
                this.validateRxBuf();
            default:
                break;
        }
    };
    /**
     * Empties the Rx buffer.
     */
    RH_Serial.prototype.clearRxBuf = function () {
        this._rxFcs = 0xffff;
        this._rxBufLen = 0;
    };
    /**
     * Adds a charater to the Rx buffer
     * @param  {number} ch The charater.
     */
    RH_Serial.prototype.appendRxBuf = function (ch) {
        if (this._rxBufLen < exports.RH_SERIAL_MAX_PAYLOAD_LEN) {
            // Normal data, save and add to FCS
            this._rxBuf[this._rxBufLen++] = ch;
            this._rxFcs = RHCRC_1.RHcrc_ccitt_update(this._rxFcs, ch);
        }
    };
    /**
     * Check whether the latest received message is complete and uncorrupted.
     */
    RH_Serial.prototype.validateRxBuf = function () {
        if (this._rxRecdFcs != this._rxFcs) {
            return;
        }
        // check if the message is addressed to this node
        if (this._promiscuous || this._rxBuf[0] == this._thisAddress || this._rxBuf[0] == radiohead_serial_1.RH_BROADCAST_ADDRESS) {
            // emit event with the received data
            var buf = new Buffer(this._rxBufLen - exports.RH_SERIAL_HEADER_LEN);
            this._rxBuf.copy(buf, 0, exports.RH_SERIAL_HEADER_LEN, this._rxBufLen);
            this.emit('recv', {
                data: buf,
                length: this._rxBufLen - exports.RH_SERIAL_HEADER_LEN,
                headerTo: this._rxBuf[0],
                headerFrom: this._rxBuf[1],
                headerId: this._rxBuf[2],
                headerFlags: this._rxBuf[3],
            });
        }
        // clear the rx buffer for ne next message
        this.clearRxBuf();
    };
    /**
     * Sends data fron a buffer using the currently set headers.
     * Note that a message length of 0 is NOT permitted.
     * @param  {Buffer}  data The buffer containing the data to send.
     * @param  {number}  len  Number of bytes from the buffer to send.
     * @return {Promise}      Promise which will be resolved if sending is completed.
     */
    RH_Serial.prototype.send = function (data, len) {
        var _this = this;
        if (len > exports.RH_SERIAL_MAX_MESSAGE_LEN) {
            len = exports.RH_SERIAL_MAX_MESSAGE_LEN;
        }
        var txBuf = new Buffer(exports.RH_SERIAL_MAX_PAYLOAD_LEN + exports.RH_SERIAL_MAX_MESSAGE_LEN + 6); // double message len because any byte in the message can be DLE, 2 prepended and 4 appended bytes
        var txFcs = 0xffff; // Initial value
        txBuf[0] = DLE; // Not in FCS
        txBuf[1] = STX; // Not in FCS
        // First the 4 headers
        txBuf[2] = this._txHeaderTo;
        txFcs = RHCRC_1.RHcrc_ccitt_update(txFcs, this._txHeaderTo);
        txBuf[3] = this._txHeaderFrom;
        txFcs = RHCRC_1.RHcrc_ccitt_update(txFcs, this._txHeaderFrom);
        txBuf[4] = this._txHeaderId;
        txFcs = RHCRC_1.RHcrc_ccitt_update(txFcs, this._txHeaderId);
        txBuf[5] = this._txHeaderFlags;
        txFcs = RHCRC_1.RHcrc_ccitt_update(txFcs, this._txHeaderFlags);
        // next index in the tx buffer
        var idx = 6;
        // Now the message
        for (var i = 0; i < len; i++) {
            txBuf[idx++] = data[i];
            txFcs = RHCRC_1.RHcrc_ccitt_update(txFcs, data[i]);
            // duplicate DLE
            if (data[i] == DLE) {
                txBuf[idx++] = DLE; // Not in FCS
            }
        }
        // End of message
        txBuf[idx++] = DLE;
        txFcs = RHCRC_1.RHcrc_ccitt_update(txFcs, DLE);
        txBuf[idx++] = ETX;
        txFcs = RHCRC_1.RHcrc_ccitt_update(txFcs, ETX);
        // Add the calculated FCS for this message
        txBuf[idx++] = (txFcs >> 8) & 0xff;
        txBuf[idx++] = txFcs & 0xff;
        // Send the used part of the tx buffer
        return new Promise(function (resolve, reject) {
            _this._port.write(txBuf.slice(0, idx), function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    };
    /**
     * Sets the address of this node. Defaults to 0xFF. The user may want to change this.
     * his will be used to test the adddress in incoming messages. In non-promiscuous mode,
     * only messages with a TO header the same as thisAddress or the broadcast addess (0xFF) will be accepted.
     * In promiscuous mode, all messages will be accepted regardless of the TO header.
     * In a conventional multinode system, all nodes will have a unique address.
     * You would normally set the header FROM address to be the same as thisAddress (though you dont have to,
     * allowing the possibilty of address spoofing).
     * @param  {number} address The address of this node.
     */
    RH_Serial.prototype.setThisAddress = function (address) {
        if (address < 0 || address > 255)
            return;
        this._thisAddress = address;
    };
    /**
     * Sets the TO header to be sent in all subsequent messages.
     * @param {number} to The new TO header value.
     */
    RH_Serial.prototype.setHeaderTo = function (to) {
        if (to < 0 || to > 255)
            return;
        this._txHeaderTo = to;
    };
    /**
     * Sets the FROM header to be sent in all subsequent messages.
     * @param {number} from The new FROM header value.
     */
    RH_Serial.prototype.setHeaderFrom = function (from) {
        if (from < 0 || from > 255)
            return;
        this._txHeaderFrom = from;
    };
    /**
     * Sets the ID header to be sent in all subsequent messages.
     * @param {number} id The new ID header value.
     */
    RH_Serial.prototype.setHeaderId = function (id) {
        if (id < 0 || id > 255)
            return;
        this._txHeaderId = id;
    };
    /**
     * Sets and clears bits in the FLAGS header to be sent in all subsequent messages.
     * First it clears the FLAGS according to the clear argument, then sets the flags according to the
     * set argument. The default for clear always clears the application specific flags.
     * @param {number} set   Bitmask of bits to be set. Flags are cleared with the clear mask before being set.
     * @param {number} clear Bitmask of flags to clear. Defaults to RH_FLAGS_APPLICATION_SPECIFIC which clears the application specific flags, resulting in new application specific flags identical to the set.
     */
    RH_Serial.prototype.setHeaderFlags = function (set, clear) {
        if (clear === void 0) { clear = radiohead_serial_1.RH_FLAGS_APPLICATION_SPECIFIC; }
        if (set >= 0 && set <= 255) {
            this._txHeaderFlags &= ~clear;
        }
        if (clear >= 0 && clear <= 255) {
            this._txHeaderFlags |= set;
        }
    };
    /**
     * Tells the receiver to accept messages with any TO address, not just messages
     * addressed to thisAddress or the broadcast address.
     * @param {boolean} promiscuous true if you wish to receive messages with any TO address.
     */
    RH_Serial.prototype.setPromiscuous = function (promiscuous) {
        this._promiscuous = promiscuous;
    };
    return RH_Serial;
}(events_1.EventEmitter));
exports.RH_Serial = RH_Serial;
//# sourceMappingURL=RH_Serial.js.map