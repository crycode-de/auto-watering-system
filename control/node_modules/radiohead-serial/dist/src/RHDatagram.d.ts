/// <reference types="node" />
/// <reference types="bluebird" />
import { EventEmitter } from 'events';
import * as Promise from 'bluebird';
import { RH_Serial } from './RH_Serial';
/**
 * Manager class for addressed, unreliable messages.
 */
export declare class RHDatagram extends EventEmitter {
    /** The used driver */
    protected _driver: RH_Serial;
    /** The address of this node. */
    protected _thisAddress: number;
    /**
     * Constructor
     * @param  {RH_Serial} driver      The used driver.
     * @param  {number}    thisAddress The address of this node.
     */
    constructor(driver: RH_Serial, thisAddress: number);
    /**
     * Initialise this instance and the driver connected to it.
     * @return {Promise} Promise which will be resolved if the init of the driver is done.
     */
    init(): Promise<{}>;
    /**
     * Sets the address of this node. Defaults to 0.
     * This will be used to set the FROM address of all messages sent by this node.
     * In a conventional multinode system, all nodes will have a unique address.
     * @param {number} thisAddress The address of this node.
     */
    setThisAddress(thisAddress: number): void;
    /**
     * Sends a message to the node(s) with the given address.
     * RH_BROADCAST_ADDRESS is a valid address which will cause the message to be
     * accepted by all RHDatagram nodes within range.
     * @param  {Buffer}  data    The buffer containing the data to send.
     * @param  {number}  len     Number of bytes from the buffer to send.
     * @param  {number}  address The address to send the message to.
     * @return {Promise}         Promise which will be resolved if sending is completed.
     */
    sendto(data: Buffer, len: number, address: number): Promise<{}>;
    /**
     * Returns the address of this node.
     * @return {number} The address of this node.
     */
    thisAddress(): number;
    /**
     * Sets the TO header to be sent in all subsequent messages.
     * @param {number} to The new TO header value.
     */
    setHeaderTo(to: number): void;
    /**
     * Sets the FROM header to be sent in all subsequent messages.
     * @param {number} from The new FROM header value.
     */
    setHeaderFrom(from: number): void;
    /**
     * Sets the ID header to be sent in all subsequent messages.
     * @param  {number} id The new ID header value.
     */
    setHeaderId(id: number): void;
    /**
     * Sets and clears bits in the FLAGS header to be sent in all subsequent messages.
     * @param  {number} set   Bitmask of bits to be set.
     * @param  {number} clear Bitmask of flags to clear.
     */
    setHeaderFlags(set: number, clear?: number): void;
}
